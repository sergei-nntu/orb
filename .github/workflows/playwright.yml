name: Playwright Tests
on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"
  push:
    branches: [ playwright-tests ]
  pull_request:
    types:
      - closed
  pull_request_review:
    types:
      - submitted
  pull_request_target:
    types:
      - closed
jobs:
  test:
    timeout-minutes: 60
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4
      - name: Pull request to develop branch or schedule
        if: ((github.event.pull_request.merged == true) || (github.event.review.state == 'approved') || (github.event_name == 'schedule'))
        uses: actions/checkout@v4
        with:
          ref: develop
      - name: Push to playwright-tests branch or workflow_dispatch
        if: ((github.event_name == 'push' && github.ref == 'refs/heads/playwright-tests') || github.event_name == 'workflow_dispatch')
        uses: actions/checkout@v4
        with:
          ref: playwright-tests
      - uses: actions/setup-node@v4
        with:
          node-version: 18
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#        with:
#          buildkitd-flags: --debug
#      - name: Build
#        uses: docker/build-push-action@v5
#        with:
#          context: .
      - name: Docker for web
        run: docker build . -t telemetrybalkan/orb
        working-directory: ./web
      - name: Docker for ros
        run: docker build . -t telemetrybalkan/ros
        working-directory: ./docker
      - name: Docker compose
        run: docker compose up -d
        working-directory: ./docker
      - name: Install curl
        run: |
          sudo apt-get update; sudo apt-get install -y curl
      - name: Run curl
        run: |
          sudo curl http://localhost:3000
      - name: Checkout to playwright-tests
        if: ((github.event.pull_request.merged == true) || (github.event_name == 'schedule'))
        uses: actions/checkout@v3
        with:
          ref: playwright-tests
      - name: Install dependencies
        run: npm ci
        working-directory: ./playwright
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        working-directory: ./playwright
      - run: |
          sudo apt-get install default-jre
          wget https://github.com/allure-framework/allure2/releases/download/2.18.1/allure_2.18.1-1_all.deb
          sudo dpkg -i allure_2.18.1-1_all.deb
#      - name: Run Server
#        run: bash run_test.sh
#        working-directory: ./playwright
      - name: Run Playwright tests
        run: npx playwright test
        working-directory: ./playwright
      - uses: actions/upload-artifact@v4
        id: artifact-upload-playwright-report-step
        if: always()
        with:
          name: playwright-report
          path: ./playwright/playwright-report/
          retention-days: 20
      - name: Output artifact ID for playwright report
        if: always()
        run: echo 'Artifact ID is ${{ steps.artifact-upload-playwright-report-step.outputs.artifact-id }}'
      - name: Install the Allure Playwright
        if: always()
        run: npm install --save-dev allure-playwright
        working-directory: ./playwright
      - name: Generate the Allure Report
        if: always()
        run: allure generate allure-results -o allure-report
        working-directory: ./playwright
      - uses: actions/upload-artifact@v4
        id: artifact-upload-allure-report-step
        if: always()
        with:
          name: allure-results
          path: ./playwright/allure-results
          retention-days: 20
      - name: Output artifact ID for allure results
        if: always()
        run: echo 'Artifact ID is ${{ steps.artifact-upload-allure-report-step.outputs.artifact-id }}'
      - name: Run ID
        if: always()
        run: echo 'Run ID is ${{ github.run_id }}'
      - name: artifact URL
        if: always()
        run: echo 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-allure-report-step.outputs.artifact-id }}'
      - run: |
          sudo apt-get install jq
          jq '.base.reportLink = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-allure-report-step.outputs.artifact-id }}"' notifications/config.json > notifications/config.json.tmp
          mv notifications/config.json.tmp notifications/config.json
        if: always()
        working-directory: ./playwright
      #    - name: Get Allure history
      #      uses: actions/checkout@v3
      #      if: always()
      #      continue-on-error: true
      #      with:
      #        ref: gh-pages
      #        path: gh-pages
      #
      #    - uses: simple-elf/allure-report-action@master
      #      if: always()
      #      id: allure-report
      #      with:
      #        allure_results: allure-results
      ##        gh_pages: gh-pages
      #        allure_report: allure-report
      #        allure_history: allure-history
      #        keep_reports: 20

      #    - name: Deploy report to Github Pages
      #      if: always()
      #      uses: peaceiris/actions-gh-pages@v3
      #      env:
      #        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #        PUBLISH_BRANCH: gh-pages
      #        PUBLISH_DIR: allure-history
      #  send_report:
      #    runs-on: ubuntu-latest
      #    needs: test
      #    steps:
      #    - uses: actions/checkout@v3
      #      with:
      #        ref: playwright-tests
      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        if: always()
        with:
          distribution: 'temurin'
          java-version: 8
      - name: "Send message"
        if: always()
        run: java "-DconfigFile=notifications/config.json" -jar notifications/allure-notifications-4.2.1.jar
        working-directory: ./playwright